<?php // vim: syntax=php fdm=marker fdc=0 so=100
/**
* @version		$Id: _dbasefirebird.lib 215 2011-09-25 18:54:41Z otto $
* @package		OpenAdmin.nl
* @author     Frank Kooger
* @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
* @license		GNU/GPL, see LICENSE.php
* OpenAdmin.nl is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
* See COPYRIGHT.php for copyright notices and details.
*/

/**
 *
 * %%abstract%%
 *
 * @abstract
 * @package		OpenAdmin.nl
 * @since		1.0
 */

/* ****************************************************************
* @LIB:      _dbasefirebird.lib
* @CLASS:    FBConnector()
* @SYLLABUS: 
* @COMMENT: this Firebird class requires PHP >= 5.3
*
*****************************************************************{{{ */

// CLASS FBConnector
// INITIATE WITH:
//   $dba = new FBConnector([str dbhost],[str dbuser],[str dbpasswd],[str dbase],[str debugmode],[int connectid]);
//
// SIMPLE SQLSTATEMENT:
//   $dba->query = <sql statement>;
//   $dba->Do_query([str user_errormessage]);
//   $array = $dba->Do_array();
// OR
//   $object = $dba->Do_object();
//
// SHORTCUTS TO FETCH 1 RECORD FROM A DATABASE:
//   $array  = $dba->Get_array(str sqlstatement [, str user_errormessage]);
//   $object = $dba->Get_object(str sqlstatement [, str user_errormessage]);
//
// SHORTCUT TO FETCH 1 FIELDVALUE FROM A DATABASERECORD:
//   $str = $dba->Get_field(str veld, str [dbase].table, str "WHERE STATEMENT");
// F.E.:
//   $str = $dba->Get_field("naam", "database.adressen", "userid=15");
//
// SHORTCUT TO FETCH MORE FIELDVALUES FROM A DATABASERECORD:
//   $str = $dba->Get_fields(arr velden, str [dbase].table, str "WHERE STATEMENT");
// F.E.:
//   $str = $dba->Get_fields(array("id","naam"), "database.adressen", "userid=15");
//
//
// LAST INSERTED RECORDID:
//   $dba->Lastid(); // IMMEDIATALY AFTER Do_query
//

/**
3 sep 04, extra parameter 'debug' om de debug functie tijdens instantieren 
te kunnen aan of uitzetten. Mogelijke values: "debugon", "debugoff" of random

*/

Class FBConnector {
  var $connect, $dbase, $query, $lquery, $respointer, $debug, $fout;
  private $trans = NULL;
  private $affected_rows = NULL;

  /* ****************************************************************
  * @METHOD: void  CONSTRUCTOR ( [ $dbh="" [, $dbu="" [, $dbp="" [, $dbase="" [, $debug="neutral" [, $connectid=0 ]]]]]] )
  * @PARAMETERS:
  *   $dbh: databasehost, mostly 'localhost' if script execution and database are at the same server
  *   $dbu: database user
  *   $dbp: password of database user
  *   $dbase: default database
  *   $debug: debug on ('debugon') or off (anyting else). In the latter case debug can be switched on through external $GLOBALS['debug']
  *   $connectid: zie syllabus
  * @RETURNS: void
  * @SYLLABUS: 
  *   IF NOT CALLED WITH ANY PARAMETER, DEFAULT PARAMETERS
  *   FOR dbhost, dbuser and dbpasswd ARE PRESUMED.
  *   THESE PARAMETERS MUST BE EXTERNAL DEFINED IN F.A. IN _init.inc
  *
  *   22 sep 2005: $connectid toegevoegd. Het is hiermee mogelijk een nieuw dbase object
  *   aan te maken met een bestaande connectid. Dit is b.v. handig als een vraag aan een andere
  *   dan de default database moet worden gesteld. Openen van een connectid op die andere dbase zorgt
  *   ervoor dat die dbase default wordt wat we niet altijd willen.
  *
  *****************************************************************{{{{ */
  public function __construct($dbh="", $dbu="", $dbp="", $dbase="", $driver='', $debug="neutral", $connectid=0) {

    // debug status uitzetten als geinitieerd
    if($debug == "debugoff") $this->debug = false;
    else if($debug == "debugon") $this->debug = true;
    else if(! empty($GLOBALS['config']->data['debug']['dbase'])) $this->debug = true;
    else $this->debug = false;

    if($this->debug) print("  \n<!-- Realmparameters (host,user,pwd): "
                          ."$dbh, $dbu, $dbp -->\n");

    if(! $connectid) { // maak connectie

      $this->dbh   = $this->setParms($dbh, "dbhost");
      $this->dbu   = $this->setParms($dbu, "dbuser");
      $this->dbp   = $this->setParms($dbp, "dbpasswd");
      $this->dbase = $this->setParms($dbase, "dbase"); // dbase is filename met volledig pad

      // als host is geen 'localhost' of geen '', dan hostnaam voor de databasenaam plaatsen
      if($this->dbh != 'localhost' && $this->dbh != '') 
        $this->dsn = $this->dbh.":".$this->dbase;
      else 
        $this->dsn = $this->dbase;

      return(self::Connect($this->dsn,$this->dbu,$this->dbp));
    }
    else 
      $this->connect = $connectid;

  } // END CONSTRUCTOR}}}}


  /* ****************************************************************
  * @METHOD: str  setParms ( string $methodparm , string $type )
  * @PARAMETERS:
  *   $methodparm: als methodparm niet leeg is, wordt deze weer direct als
      resultaat teruggegeven; het betekent dat deze waarde met constructor is
      ingegeven en dat zoeken naar andere methoden niet meer nodig is.
  *   $type: welke parameter wordt afgevraagd: dbhost, dbuser, dbpasswd, dbase
  * @RETURNS: string in case of succes, false otherwise
  * @SYLLABUS: 
  *   BEPAAL DE INPUT PARAMETERS. MAAK EEN KEUZE UIT (IN VOLGORDE): 
  *   1. invoer met de methode-aanroep 
  *   3. beschikbaar zijn van globale parms
  *****************************************************************{{{{ */
  function setParms($methodparm, $type) {
    global $config;

    switch($type) {
      
      case "driver"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['db']['driver'])) return($config->data['db']['driver']);
        else if(defined("DRIVER")) return(DRIVER);
        else return(false);
        break;
      case "dbhost"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbhost'])) return($config->data['dbhost']);
        else if(! empty($config->data['dbase']['host'])) return($config->data['dbase']['host']);
        else if(! empty($config->data['db']['host'])) return($config->data['db']['host']);
        else if(defined("DBHOST")) return(DBHOST);
        else if(! empty($GLOBALS['dbhost'])) return($GLOBALS['dbhost']);
        else return(false);
        break;
      case "dbuser"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbuser'])) return($config->data['dbuser']);
        else if(! empty($config->data['dbase']['user'])) return($config->data['dbase']['user']);
        else if(! empty($config->data['db']['user'])) return($config->data['db']['user']);
        else if(defined("DBUSER")) return(DBUSER);
        else if(! empty($GLOBALS['dbuser'])) return($GLOBALS['dbuser']);
        else return(false);
        break;
      case "dbpasswd" :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbpasswd'])) return($config->data['dbpasswd']);
        else if(! empty($config->data['dbase']['passwd'])) return($config->data['dbase']['passwd']);
        else if(! empty($config->data['db']['passwd'])) return($config->data['db']['passwd']);
        else if(defined("DBPASSWD")) return(DBPASSWD);
        else if(! empty($GLOBALS['dbpasswd'])) return($GLOBALS['dbpasswd']);
        else return(false);
        break;
      case "dbase" :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['defaultdbase'])) return($config->data['defaultdbase']);
        else if(! empty($config->data['dbase']['default'])) return($config->data['dbase']['default']);
        else if(! empty($config->data['db']['default'])) return($config->data['db']['default']);
        else if(defined("DEFAULTDBASE")) return(DEFAULTDBASE);
        else if(! empty($GLOBALS['dbase'])) return($GLOBALS['dbase']);
        else return(false);
        break;
      default         :
        break;

    } // end switch

  } // END FUNCTION setParms}}}}
    

  /*********************************************************************
  * @METHOD: bool Connect( [ str $dsn='' [, str $user [, str $passwd ]]] )
  * @PARAMETERS: str $dsn: volledig pad naar database (incl host indien remotehost) of database-alias
  *              str $user: userid
  *              str passwd: password
  * @RETURNS: true or false
  * @SYLLABUS:
  *   Maak een connectie met een database. Zet een evt eerdere
  *   connectie-identifier op NULL zodat er inderdaad een nieuwe connectie
  *   wordt gemaakt. Dit is soms nodig om een flush te doen voor een nieuwe
  *   bevraging.
  *
  /* *********************************************************************{{{ */
  function Connect($dsn='',$dbu='',$dbp='') {
    // resource ibase_connect  ([ string $database  
    //                          [, string $username  
    //                          [, string $password  
    //                          [, string $charset  
    //                          [, int $buffers  
    //                          [, int $dialect  
    //                          [, string $role  
    //                          [, int $sync  ]]]]]]]] )
    $dsn = ($dsn) ?: $this->dsn;
    $dbu = ($dbu) ?: $this->dbu;
    $dbp = ($dbp) ?: $this->dbp;
    $this->connect = NULL;
    if (! $this->connect = ibase_connect($dsn,$dbu,$dbp,'ISO8859_1',0,3)) {
      $this->Printerrore ("Fout init-connect3: ". ibase_errmsg() ."\n") ;
      $this->fout = 'geen connectie';
      return(false);
    }
    else
      return(true);

  } // END METHOD Connect }}}
    

  /*********************************************************************
  * @METHOD: void flush( [ str $sql ] )
  * @PARAMETERS: str $sql - wordt geprint indien meegegeven
  * @RETURNS: void
  * @SYLLABUS:
  *   Doe een unload/load van de connectie. Hierdoor is een UPDATE/INSERT etc. direct weer leesbaar
  *
  /* *********************************************************************{{{ */
  function flush($sql='') {
    static $i = 0;
    printrc1(++$i,"flushing: ");
    if($sql)
    printrc1($sql,"sql: ");
    ibase_close($this->connect);
    self::Connect();
  } // END METHOD flush }}}


  /*********************************************************************
  * @METHOD: bool Select( [ str $dbase='' ] )
  * @PARAMETERS: str $dbase
  * @RETURNS: true or false
  * @SYLLABUS:
  *   SELECTEER EEN SPECIFIEKE DATABASE ALS DEFAULT
  *
  /* *********************************************************************{{{ */
  function Select($dbase='', $oorsprong='') {
    $dbh = $this->setParms($dbh, "dbhost");
    $dbu = $this->setParms($dbu, "dbuser");
    $dbp = $this->setParms($dbp, "dbpasswd");

    // als host is geen 'localhost' of geen '', dan hostnaam voor de databasenaam plaatsen
    if($dbh != 'localhost' && $dbh != '') $dsn = $dbh.":".$dbase;
    else $dsn = $dbase;

    if($this->debug) {
      if($oorsprong) $this->debugprint("Select: {$dsn} - ({$oorsprong})");
      else           $this->debugprint("Select: {$dsn}");
    }

    # resource ibase_connect  ([ string $database  [, string $username  [, string $password  [, string $charset  [, int $buffers  [, int $dialect  [, string $role  [, int $sync  ]]]]]]]] )
    if (! $this->connect = ibase_connect($dsn,"$dbu","$dbp",'ISO8859_1',0,3)) {
      $this->Printerrore ("Fout Select: ". ibase_errmsg() ."\n") ;
      $this->fout = 'geen connectie';
      return(false);
    }
    else
      return(true);

  } // END METHOD Select }}}

  
  /*********************************************************************
  * @METHOD: str Lastid( )
  * @PARAMETERS:  
  * @RETURNS: Last inserted autonum or false
  * @SYLLABUS:
  *
  /* *********************************************************************{{{ */
  function Lastid() {
    return(ibase_insert_id($this->connect));
  } // END METHOD Lastid }}}


  /*********************************************************************
  * @METHOD: str newId( )
  * @PARAMETERS:  
  * @RETURNS: Last inserted autonum or false
  * @SYLLABUS: Geeft een met 1 verhoogd id terug van een tabel. Default is het
  * veld "id" maar kan aangepast worden.
  *
  /* *********************************************************************{{{ */
  function newId($tabel, $veld='id', $oorsprong='') {
    if(preg_match("/boekregels/", $tabel)) $veld='boekregelid';
    else if(preg_match("/journaal/", $tabel)) $veld='journaalid';
    else $veld='id';
    if($id = $this->Get_field("MAX(\"{$veld}\")", $tabel,'',$oorsprong)) {
      return(++$id);
    }
    else {
      // als een tabel nog leeg is geeft deze Null terug. vertaal dat naar 1
      return(1);
    }
  } // END METHOD newId }}}


  /*********************************************************************
  * @METHOD: pointer Do_sql( [ str $oorsrprong='' ] )
  * @PARAMETERS: 
  *   str $oorsprong: een vrij in te geven string die getoond wordt indien $this->debug==true.
  *   Vaak is dit een string in de vorm: __FILE__."::".__FUNCTION__."::".__LINE__
  * @RETURNS: pointer naar resultaat of false
  * @SYLLABUS:
  *   Stuur een sql execute statement naar ibase
  *   De query moet al eerder geladen zijn in de instance parameter: $object->query
  *
  /* *********************************************************************{{{ */
  function Do_sql($oorsprong='')  {

    if($this->debug) {
      if($oorsprong) $this->debugprint("Do_sql ({$oorsprong}): {$this->query}");
      else           $this->debugprint("Do_sql: {$this->query}");
    }

    return($this->Do_query($this->query));

  } // END METHOD Do_sql }}}


  /*********************************************************************
  * @METHOD: pointer Do_query( str query, [ str $oorsrprong='' ] )
  * @PARAMETERS: 
  *   str $oorsprong: een vrij in te geven string die getoond wordt indien $this->debug==true.
  *   Vaak is dit een string in de vorm: __FILE__."::".__FUNCTION__."::".__LINE__
  * @RETURNS: pointer naar resultaat of false
  * @SYLLABUS:
  *   STUUR EEN SQL STATEMENT EN EXECUTE GELIJK.
  *   Deze methode laat een evt. eerder geladen db->query intact
  *   NOTE: dit laatste is niet meer waar. Omdat PDO een Data-seek functie mist
  *   moeten we om een data-seek de query herhalen. De query van Do_sql() en
  *   Do_query moet dus bewaard zijn voor de data-seek. Dit betekent tevens dat
  *   een data-seek alleen kan worden gedaan bij een Do_sql() en een
  *   Do_query().
  *
  /* *********************************************************************{{{ */
  public static function select_handler($exception) {
    // Output the exception details
    printrc1('Select exception: '. $exception->getMessage());
  }

  public function Do_query($str, $oorsprong='') {

    $str = $this->settleSign($str);
    $str = $this->settleLimit($str);

    if($this->debug) {
      if($oorsprong) $this->debugprint("Do_query ({$oorsprong}): {$str}");
      else           $this->debugprint("Do_query: {$str}");
    }

    // Temporarily change the PHP exception handler while we . . .
    //set_exception_handler(array(__CLASS__, 'select_handler'));

    // In PHP 5.0.0 and up, this function will return the number of rows
    // affected by the query for INSERT, UPDATE and DELETE statements. In order
    // to retain backward compatibility, it will return TRUE for these
    // statements if the query succeeded without affecting any rows. 

    if(preg_match("/INSERT|DELETE|UPDATE|CREATE|DROP/", $str)) {
      $tr = ibase_trans(IBASE_DEFAULT, $this->connect);
      if ($result=ibase_query($tr, $str)) {
        if($result === true) { // succeeded without affecting any rows
          $this->affected_rows = NULL;
        }
        else 
          $this->affected_rows = $result;
      }
      else {
        $this->affected_rows = NULL;
        $this->Printerror("<P>$str<P>Fout Query-141: ". ibase_errmsg() ."\n"
                         ."Oorsprong: $oorsprong");
        return(false);
      }
      ibase_commit($tr);
      // Joost mag weten waarom dit opeens nodig is maar zonder flush wordt een
      // UPDATE/INSERT etc wel uitgevoerd (dankzij de commit) maar het is niet
      // zichtbaar als in dezelfde connect een SELECT wordt gedaan.
      self::flush($str);
    }
    else {
      // If the query raises an error, returns FALSE. If it is successful and
      // there is a (possibly empty) result set (such as with a SELECT query),
      // returns a result identifier. If the query was successful and there were
      // no results, returns TRUE
      if (! $this->respointer=ibase_query($this->connect, $str)) {
        $this->Printerror("<P>$str<P>Fout Query-41: ". ibase_errmsg() ."\n");
        return(false);
      }
    }

    // Change the exception handler back to whatever it was before
    //restore_exception_handler();

    return($this->respointer);

  } // END METHOD Do_query }}}

  
  /*********************************************************************
  * @METHOD: pointer exec( str query, [ str $oorsrprong='' ] )
  * @PARAMETERS: 
  *   str $oorsprong: een vrij in te geven string die getoond wordt indien $this->debug==true.
  *   Vaak is dit een string in de vorm: __FILE__."::".__FUNCTION__."::".__LINE__
  * @RETURNS: pointer naar resultaat of false
  * @SYLLABUS:
  *   STUUR EEN SQL STATEMENT EN EXECUTE GELIJK.
  *   is bedoeld om te worden gebruikt tussen beginTranaction en commit
  *
  /* *********************************************************************{{{ */
  function exec($str, $oorsprong='') {
    // als er een transaction pointer is, gebruik die
    $this->respointer = ibase_query($this->trans, $str);
    return($this->respointer);
  }

  
  // RETURNS AN ARRAY INDEXED BY COLUMN NUMBER AS RETURNED IN YOUR RESULT SET, STARTING AT COLUMN 0  OR RETURNS FALSE
  //
  function Do_num($dummy="")  {
    if (! $arr=$this->respointer->fetch(PDO::FETCH_NUM)) {
      return(false);
    }
    return($arr);
  } // END METHOD Do_num }}}


  // RETURNS ASSOCIATIVE ARRAY FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_assoc()  {
    $ar = ibase_fetch_assoc($this->respointer, IBASE_TEXT);
    return(($ar) ? $ar : false);
  }


  // RETURNS ARRAY FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_array()  {
    $ar = ibase_fetch_row($this->respointer, IBASE_TEXT);
    return(($ar) ? $ar : false);
  }


  // RETURNS OBJECT FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_object()  {
    $obj = @ibase_fetch_object($this->respointer, IBASE_TEXT);
    return(($obj) ? $obj : false);
  }

  // RETURNS FIELDVALUE OF $field FROM RECORD $row
  // IN RESULT POINTER OR RETURNS FALSE
  // LET OP vanwege complexiteit is alleen row0 te bevragen
  //
  function Do_result($field=0,$row=0)  {
    $ar = ibase_fetch_row($this->respointer, IBASE_TEXT);
    $this->Do_free();
    return(($ar) ? $ar[$field] : false);
  }


  function settleSign($expr) {
    return(preg_replace("/[`]/", "\"", $expr));
  } // END METHOD settleSign


  function settleLimit($expr) {
    return(preg_replace("/LIMIT/", "ROWS", $expr));
  } // END METHOD settleLimit


  function settleWhere($expr) {

    if(preg_match("/^[ ]*(ORDER|GROUP)/", $expr)) $where=$expr;
    elseif(preg_match("/^[ ]*(AND)/", $expr))   $where = preg_replace("/AND/", "WHERE", $expr);
    elseif(preg_match("/^[ ]*(WHERE)/", $expr)) $where=$expr;
    else $where = "WHERE ".$expr;

    return($this->settleSign($where));

  } // END METHOD settleWhere


  /*********************************************************************
  * @METHOD: str Get_field( string $veld, str $tabel, str $expr[, str $oorsprong]] )
  * @PARAMETERS:  
  *    str $veld: het veld waarvan de waarde willen weten
  *    str $tabel: de table waarin het veld zich bevindt
  *    str $expr: de WHERE expression zonder 'WHERE'. Als er geen selectiecriteria zijn is dit tenminste '1'
  *    str $oorsprong: een arbitraire code waarmee we in de scripts de
  *    oorsprong van de query kunnen aangeven. Dit is vooral van belang bij
  *    debug waar we kunnen zien waar b.v. een fout in een query zijn oorsprong
  *    heeft.
  * @RETURNS:  string
  * @SYLLABUS:
  *    RETURNS VALUE OF FIELD $veld FROM table,field,value
  *    syntax: $db->Get_field("veld", "table", "select", $oorsprong="hiergebeurdehet");
  *
  /* *********************************************************************{{{ */
  function Get_field($veld,$tabel,$expr='',$oorsprong='')  {

    $where = $this->settleWhere($expr);
    if(! preg_match("/\".*\"/", $veld) && $veld != 'COUNT(*)') $veld = "\"{$veld}\"";

    $this->lquery = ($expr) ? "SELECT $veld FROM $tabel $where ROWS 1" : 
                              "SELECT $veld FROM $tabel ROWS 1";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_field ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_field: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-1 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }
/*
array ibase_fetch_row  ( resource $result_identifier  [, int $fetch_flag = 0  ] )

fetch_flag  is a combination of the constants IBASE_TEXT and IBASE_UNIXTIME
ORed together. Passing IBASE_TEXT will cause this function to return BLOB
contents instead of BLOB ids. Passing IBASE_UNIXTIME will cause this function
to return date/time values as Unix timestamps instead of as formatted strings. 

printr(ibase_fetch_row($rev), IBASE_TEXT);
Array
(
  [0] => 4
)

printr(ibase_fetch_assoc($rev), IBASE_TEXT);
Array
(
  [MAX] => 4
)

printr(ibase_fetch_object($rev), IBASE_TEXT);
stdClass Object
(
  [MAX] => 4
)
*/

    $ar = ibase_fetch_row($rev, IBASE_TEXT);
    $this->Do_free($rev);
    return(($ar) ? $ar[0] : false);

  } // END METHOD Get_field }}}


  // RETURNS ARRAY OF VALUES OF FIELD $veld OF 1 OR MORE RECORDS FROM table,field,value
  //
  /* *********************************************************************{{{ */
  function Get_array_field($veld,$tabel,$expr='',$oorsprong='')  {

    $where = $this->settleWhere($expr);
    // Als een veld wordt aangeleverd zonder omsluitende apostrophes, voeg ze toe
    if(! preg_match("/\".*\"/", $veld) && $veld != 'COUNT(*)') $veld = "\"{$veld}\"";

    $this->lquery = ($expr) ? "SELECT $veld FROM $tabel $where" : 
                              "SELECT $veld FROM $tabel";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_array_field ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_array_field: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-10 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }

    $ar = array();
    while($row = ibase_fetch_row($rev)) $ar[] = $row[0];
    $this->Do_free($rev);
    // return dus altijd een array, desnoods een lege
    return($ar);
  }


  // RETURNS VALUE OF MORE FIELDS arr[$veld] FROM table,fields,value
  //
  /* *********************************************************************{{{ */
  function Get_fields($velden,$tabel,$expr='',$assoc=1,$oorsprong='')  {
    $fields = "";
    if(is_array($velden)) {
      foreach($velden AS $val)
        if(! preg_match("/\".*\"/", $val) ) $fields .= ",\"{$val}\"";
        else $fields .= ",{$val}";
      $fields = substr($fields,1);
    }
    else 
      if(! preg_match("/\".*\"/", $velden) && $velden != 'COUNT(*)') $fields = "\"{$velden}\"";
      else $fields = $velden;

    $where = $this->settleWhere($expr);

    $this->lquery = ($expr) ? "SELECT $fields FROM $tabel $where ROWS 1" : 
                              "SELECT $fields FROM $tabel ROWS 1";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_fields ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_fields: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-11 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }

    if($assoc == 1) {
      $arr = ibase_fetch_assoc($rev, IBASE_TEXT);
    }
    else {
      // maak er geen assoc van omdat de array-items dan alleen maar
      // op veldnaam zijn te selecteren
      // Zonder assoc kan het resultaat b.v. in een list($a, $b) worden gelezen.
      // met assoc zouden a en b exact de gevraagde veldnamen moeten zijn.
      $arr = ibase_fetch_row($rev, IBASE_TEXT);
    }
    $this->Do_free($rev);
    return(($arr) ? $arr : '');

  } // END METHOD Get_fields }}}


  // RETURNS ARRAY OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  function Get_array($expr, $oorsprong='')  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr ." ROWS 1";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_array query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_array query: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-2 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }
 
    $arr = ibase_fetch_assoc($rev);
    $this->Do_free($rev);
    return(($arr) ? $arr : '');

  } // END METHOD Get_array }}}


  // RETURNS ASSOCIATIVE ARRAY OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  /* *********************************************************************{{{ */
  function Get_assoc($expr, $oorsprong='')  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr ." ROWS 1 ";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_assoc query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_assoc query: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-20 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }

    $arr = ibase_fetch_assoc($rev);
    $this->Do_free($rev);
    return(($arr) ? $arr : '');

  } // END METHOD Get_assoc }}}

  // RETURNS OBJECT OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  /* *********************************************************************{{{ */
  function Get_object($expr,$oorsprong='')  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr ." ROWS 1 ";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_object query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_object query: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-21 : ". ibase_errmsg() ."\n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }

    $obj = ibase_fetch_object($rev);
    $this->Do_free($rev);
    return(($obj) ? $obj : '');

  } // END METHOD Get_object }}}


  /*********************************************************************
  * @METHOD: str Get_datediff( str $isodate[, str $isodate2='' ] )
  * @PARAMETERS:  
  *    str $isodate: Een datum in iso formaat: 'Y-m-d'
  *    str $isodate2: Een datum in iso formaat: 'Y-m-d'
  * @RETURNS:  string difference in days
  * @SYLLABUS:
  *    RETURNS difference in days between 2 isodates. Als er 1 datum wordt
  *    meegegeven is het verschil tussen vandaag en die datum. Als er 2 data
  *    worden meegegeven dan is het verschil tussen isodate -/- isodate2
  *
  /* *********************************************************************{{{ */
  function Get_datediff($date,$date2='')  {

    // bij Firebird moet een SELECT statement tegen een tabel aangehouden worden
    $from = 'FROM RDB$DATABASE';

    if($date2) $query = "SELECT ('".DateConnector::norm2iso($date)."' - '".DateConnector::norm2iso($date2)."') ".$from;
    else       $query = "SELECT (CURRENT_DATE - date '".DateConnector::norm2iso($date)."') ".$from;

    if($this->debug) $this->debugprint("Get_datediff query: {$query}");

    if (! $rev=ibase_query($this->connect, $query)) {
      $str = "<BR>Fout Query-22 : ". ibase_errmsg() ."\n
              <BR>RemotQuery : {$query}<P>\n";
      $this->Printerror($str);
      return(false);
    }
    else  {
      $ar = ibase_fetch_row($rev, IBASE_TEXT);
      return(($ar) ? $ar[0] : false);
    }
  } // END METHOD Get_datediff }}}


  // DELETE RECORD(S)
  //
  function Delete_record($tabel, $expr, $oorsprong='') {

    // Een expr is hier verplicht anders zouden we de hele tabel kunnen wissen indien we expr vergeten
    //
    $this->lquery = "DELETE FROM {$tabel} WHERE $expr";

  if($this->debug) $this->debugprint("Delete_record query: {$this->lquery}");

    return($this->Do_query($this->lquery, "Van Delete_record - ".$oorsprong));
  }


  /*********************************************************************
  * @METHOD: bool existTable( str $tablename )
  * @PARAMETERS:  
  * @RETURNS:  true on existance, else false
  * @SYLLABUS:
  *    Test of een bepaalde table in de database bestaat.
  *
  /* *********************************************************************{{{ */
  function existTable($name, $oorsprong='') {
      
    $this->lquery = 'SELECT RDB$RELATION_NAME FROM RDB$RELATIONS WHERE RDB$RELATION_NAME = \''.$name.'\''; 

    if($this->debug) $this->debugprint("Exist_record: {$this->lquery}");

    if (! $this->Do_query($this->lquery)) {
      $str = "<BR>Fout Query-13 : ". ibase_errmsg() ."\n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
    }

    if(($val = $this->Do_result())) {
      return(true);
    }
    else {
      return(false);
    }
            
  } // END FUNCTION existTable }}}


  // EXIST RECORD, RETURNS FALSE, 0 OR NUMBER OF RECORDS FOUND
  //
  function Exist_record($tabel, $expr) {

    $this->lquery = "SELECT COUNT(*) FROM {$tabel} WHERE $expr ROWS 1";

    if($this->debug) $this->debugprint("Exist_record: {$this->lquery}");

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-13 : ". ibase_errmsg() ."\n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
    }

    return($this->Do_result());
  }


  // TRANSACTIONS
  //
  function beginTransaction() {
    $this->trans = ibase_trans(IBASE_DEFAULT, $this->connect);
  }

  function commit() {
    ibase_commit($this->trans);
    $this->trans = NULL;
  }

  function rollback() {
    ibase_rollback($this->trans);
  }


  // AUXILLERY FUNCTIES
  //

  // Data_seek werkt niet in Firebird
  //
  function Data_seek($row='')  {
    $this->Printerror("<P>Data_seek wordt niet ondersteund in Firebird!<p>\n");
    return(false);
  }

  // Een Rewind kunnen we simuleren door de query opnieuw te stellen.
  //
  function Rewind() {
    if($this->Do_query($this->respointer->queryString, '', "Oorsprong: Herhaal."))
      return(true);
    else
      return(false);
  }

  function Herhaal()  {
    return($this->Rewind());
  }

  function Do_close()  {
      ibase_close($this->connect);
  }

  function Do_free($pointer='')  {
    if($pointer)
      ibase_free_result($pointer);
    else
      ibase_free_result($this->respointer);
  }

  // How to count the number of records retrieved?
  //   Firebird doesn't have this feature. You can count records by fetching
  //   all rows, or by doing SELECT COUNT(*) ... using the same query. 
  // Om dit probleem te adresseren kunnen we alleen bij Do_sql() een N_rows
  // doen. Hierbij hebben we immers een $this->query opgeslagen die we
  // gebruiken voor een extra query waarbij we het gevonden resultaat tellen.
  // Hierna moeten we weer de originele query doen om de respointer goed te
  // zetten
  //
  function N_rows($oorsprong='')  {
    $i = 0;

    if($this->debug) {
      if($oorsprong) $this->debugprint("N_rows query: ({$oorsprong}): {$this->query}");
      else           $this->debugprint("N_rows query: {$this->query}");
    }

    if($this->query) {
      while($this->Do_array()) $i++;
    }
    $this->Do_free();
    $this->Do_sql("Van N_rows");
      
    return($i);
  }

  function N_affected_rows() {
    // $this->affected_rows is een result van Do_query met INSERT, UPDATE of DELETE
    // De echte functie ibase_affected_rows krijg ik (nog) niet werkend.
    return($this->affected_rows);

    if($x = ibase_affected_rows($this->connect)) {
      printrc1($x, "affected rows: ");
      return($x);
    }
    else
      return(false);
  }
  
  function N_fields()  {
      return(ibase_num_fields($this->respointer));
  }

  function Field_name($ind)  {
      return(ibase_field_name($this->respointer, $ind));
  }

  function Field_type($ind)  {
      return(ibase_field_type($this->respointer, $ind));
  }

  /* ****************************************************************
  * @METHOD:   Prepare($str)
  * @SYLLABUS: Maakt een string gereed om in een SQL query in te voegen.
  *   Voor Mysql is dit b.v. addslashes().
  *   De Firebase en sqlite methode (en sybase) voegt enkele apostrophes toe
  *   als escape characters. Tevens voegt het een enkele apostrophe aan het
  *   begin en einde van de string toe zodat het Insert statement geen
  *   apostrophes mag hebben. Dat is niet slim omdat we dan de code op veel
  *   plaatsen moeten wijzigen. Beter is om hier de begin en eindapostroph er
  *   weer af te halen.
  *****************************************************************{{{ */
  function Prepare($str) {
    $con = new PDO('sqlite:'.$GLOBALS['config']->data['dir']['dbase'].PS.'help.db3');
    return(substr($con->quote($str),1,-1));
  } // END FUNCTION Prepare }}}

  function Printerror($str) {
    echo "\n\n<!-- FUNCTIONAL ERROR: \n".$str." -->\n\n";
  }

  function Printerrore($str) {
    echo "\n\n<!-- FATAL ERROR: \n".$str." -->\n\n";
    exit;
  }

  function debugprint($str) {
    echo "  \n<!-- $str -->\n";
  }

} // END CLASS FBConnector

/*******************************************************************************
***  END _dbasefirebird.lib
******************************************************************************}}} */

