<?php // vim: syntax=php fdm=marker fdc=0 so=100
/**
* @version		$Id: _dbasepdo.lib 279 2013-09-14 20:41:33Z otto $
* @package		OpenAdmin.nl
* @author     Frank Kooger
* @copyright	Copyright (C) 2005 - 2009 Open Source Matters. All rights reserved.
* @license		GNU/GPL, see LICENSE.php
* OpenAdmin.nl is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
* See COPYRIGHT.php for copyright notices and details.
*/

/**
 *
 * %%abstract%%
 *
 * @abstract
 * @package		OpenAdmin.nl
 * @since		1.0
 */

/* ****************************************************************
* @LIB:      _dbasepdo.lib
* @CLASS:    PDOConnector()
* @SYLLABUS: 
*
*****************************************************************{{{ */

// CLASS PDOConnector
// INITIATE WITH:
//   $dba = new PDOConnector([str dbhost],[str dbuser],[str dbpasswd],[str dbase],[str debugmode],[int connectid]);
//
// SIMPLE SQLSTATEMENT:
//   $dba->query = str sql statement;
//   $dba->Do_sql();
// or in 1 strike:
//   $dba->Do_query(str sql statement, [str user_errormessage]);
//
// Fetch results:
//   $array = $dba->Do_array();
// OR
//   $object = $dba->Do_object();
//
// SHORTCUTS TO FETCH 1 RECORD FROM A DATABASE:
//   $array  = $dba->Get_array(str sqlstatement [, str user_errormessage]);
//   $object = $dba->Get_object(str sqlstatement [, str user_errormessage]);
//
// SHORTCUT TO FETCH 1 FIELDVALUE FROM A DATABASERECORD:
//   $str = $dba->Get_field(str veld, str [dbase].table, str "WHERE STATEMENT");
// F.E.:
//   $str = $dba->Get_field("naam", "database.adressen", "userid=15");
//
// SHORTCUT TO FETCH MORE FIELDVALUES FROM A DATABASERECORD:
//   $str = $dba->Get_fields(arr velden, str [dbase].table, str "WHERE STATEMENT");
// F.E.:
//   $str = $dba->Get_fields(array("id","naam"), "database.adressen", "userid=15");
//
//
// LAST INSERTED RECORDID:
//   $dba->Lastid(); // IMMEDIATALY AFTER Do_query
//

/**
3 sep 04, extra parameter 'debug' om de debug functie tijdens instantieren 
te kunnen aan of uitzetten. Mogelijke values: "debugon", "debugoff" of random

*/


Class SafePDO extends PDO {
 
  public static function exception_handler($exception) {
    // Output the exception details
    die('Uncaught exception: '. $exception->getMessage());
  }

  public function __construct($dsn, $username='', $password='', $driver_options=array()) {

    // Temporarily change the PHP exception handler while we . . .
    set_exception_handler(array(__CLASS__, 'exception_handler'));

    // . . . create a PDO object
    parent::__construct($dsn, $username, $password, $driver_options);

    // Change the exception handler back to whatever it was before
    restore_exception_handler();
  }

} // END CLASS Safe PDO


Class PDOConnector {
  var $connect, $dbase, $query, $lquery, $respointer, $debug;
  private $affected_rows = NULL;

  /* ****************************************************************
  * @METHOD: void  CONSTRUCTOR ( [ $dbh="" [, $dbu="" [, $dbp="" [, $dbase="" [, $debug="neutral" [, $connectid=0 ]]]]]] )
  * @PARAMETERS:
  *   $dbh: databasehost, mostly 'localhost' if script execution and database are at the same server
  *   $dbu: database user
  *   $dbp: password of database user
  *   $dbase: default database
  *   $debug: debug on ('debugon') or off (anyting else). In the latter case debug can be switched on through external $GLOBALS['debug']
  *   $connectid: zie syllabus
  * @RETURNS: void
  * @SYLLABUS: 
  *   IF NOT CALLED WITH ANY PARAMETER, DEFAULT PARAMETERS
  *   FOR dbhost, dbuser and dbpasswd ARE PRESUMED.
  *   THESE PARAMETERS MUST BE EXTERNAL DEFINED IN F.A. IN _init.inc
  *
  *   22 sep 2005: $connectid toegevoegd. Het is hiermee mogelijk een nieuw dbase object
  *   aan te maken met een bestaande connectid. Dit is b.v. handig als een vraag aan een andere
  *   dan de default database moet worden gesteld. Openen van een connectid op die andere dbase zorgt
  *   ervoor dat die dbase default wordt wat we niet altijd willen.
  *
  *****************************************************************{{{{ */
  public function __construct($dbh="", $dbu="", $dbp="", $dbase="", $drv="", $debug="neutral") {

    // debug status uitzetten als geinitieerd
    if($debug == "debugoff") $this->debug = false;
    else if($debug == "debugon") $this->debug = true;
    else if(! empty($GLOBALS['config']->data['debug']['dbase'])) $this->debug = true;
    else $this->debug = false;

    if($this->debug) print("  \n<!-- Realmparameters (host,user,pwd): "
                          ."$dbh, $dbu, $dbp -->\n");

    $drv = $this->setParms($drv, "driver");
    $dbh = $this->setParms($dbh, "dbhost");
    $dbu = $this->setParms($dbu, "dbuser");
    $dbp = $this->setParms($dbp, "dbpasswd");
    $this->dbase = $this->setParms($dbase, "dbase");

    // sqlite geen hostdef
    switch($drv) {
      case 'sqlite'  : // zorg voor dbasefile met volledig pad
        $dsn = $drv.':'.$this->dbase;
        break;
      default        : // geef hostnaam mee
        $dsn = $drv.':'.$this->dbase;
        if(! empty($dbh)) $dsn .= ';host='.$dbh; 
        break;
    }

    if (! $this->connect = new SafePDO($dsn, $dbu, $dbp)) {
      $this->Printerrore ("Fout init-connect3: \n") ;
    }

    if($drv='sqlite') { // definieer sqlite functions
      $this->connect->sqliteCreateFunction('round', 'Myround', 2 );
      $this->connect->sqliteCreateFunction('preg_match', 'Mypregmatch', 2);
    }
    $this->driver = $drv;

    return($this->connect);

  } // END CONSTRUCTOR}}}}


  /* ****************************************************************
  * @METHOD: str  setParms ( string $methodparm , string $type )
  * @PARAMETERS:
  *   $methodparm: als methodparm niet leeg is, wordt deze weer direct als
      resultaat teruggegeven; het betekent dat deze waarde met constructor is
      ingegeven en dat zoeken naar andere methoden niet meer nodig is.
  *   $type: welke parameter wordt afgevraagd: dbhost, dbuser, dbpasswd, dbase
  * @RETURNS: string in case of succes, false otherwise
  * @SYLLABUS: 
  *   BEPAAL DE INPUT PARAMETERS. MAAK EEN KEUZE UIT (IN VOLGORDE): 
  *   1. invoer met de methode-aanroep 
  *   3. beschikbaar zijn van globale parms
  *****************************************************************{{{{ */
  function setParms($methodparm, $type) {
    global $config;

    switch($type) {
      
      case "driver"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['db']['driver'])) return($config->data['db']['driver']);
        else if(defined("DRIVER")) return(DRIVER);
        else return(false);
        break;
      case "dbhost"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbhost'])) return($config->data['dbhost']);
        else if(! empty($config->data['dbase']['host'])) return($config->data['dbase']['host']);
        else if(! empty($config->data['db']['host'])) return($config->data['db']['host']);
        else if(defined("DBHOST")) return(DBHOST);
        else if(! empty($GLOBALS['dbhost'])) return($GLOBALS['dbhost']);
        else return(false);
        break;
      case "dbuser"   :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbuser'])) return($config->data['dbuser']);
        else if(! empty($config->data['dbase']['user'])) return($config->data['dbase']['user']);
        else if(! empty($config->data['db']['user'])) return($config->data['db']['user']);
        else if(defined("DBUSER")) return(DBUSER);
        else if(! empty($GLOBALS['dbuser'])) return($GLOBALS['dbuser']);
        else return(false);
        break;
      case "dbpasswd" :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['dbpasswd'])) return($config->data['dbpasswd']);
        else if(! empty($config->data['dbase']['passwd'])) return($config->data['dbase']['passwd']);
        else if(! empty($config->data['db']['passwd'])) return($config->data['db']['passwd']);
        else if(defined("DBPASSWD")) return(DBPASSWD);
        else if(! empty($GLOBALS['dbpasswd'])) return($GLOBALS['dbpasswd']);
        else return(false);
        break;
      case "dbase" :
             if(! empty($methodparm)) return($methodparm);
        else if(! empty($config->data['defaultdbase'])) return($config->data['defaultdbase']);
        else if(! empty($config->data['dbase']['default'])) return($config->data['dbase']['default']);
        else if(! empty($config->data['db']['default'])) return($config->data['db']['default']);
        else if(defined("DEFAULTDBASE")) return(DEFAULTDBASE);
        else if(! empty($GLOBALS['dbase'])) return($GLOBALS['dbase']);
        else return(false);
        break;
      default         :
        break;

    } // end switch

  } // END METHOD setParms}}}}
    

  /*********************************************************************
  * @METHOD: bool Select( [ str $dbase='' ] )
  * @PARAMETERS: str $dbase
  * @RETURNS: true or false
  * @SYLLABUS:
  *   SELECTEER EEN SPECIFIEKE DATABASE ALS DEFAULT
  *
  /* *********************************************************************{{{ */
  function Select($dbase='', $oorsprong='') {
    $dbh = $this->setParms($dbh, "dbhost");
    $dbu = $this->setParms($dbu, "dbuser");
    $dbp = $this->setParms($dbp, "dbpasswd");

    // als host is geen 'localhost' of geen '', dan hostnaam voor de databasenaam plaatsen
    if($dbh != 'localhost' && $dbh != '') $dsn = $dbh.":".$dbase;
    else $dsn = $dbase;

    if($this->debug) {
      if($oorsprong) $this->debugprint("Select: {$dsn} - ({$oorsprong})");
      else           $this->debugprint("Select: {$dsn}");
    }

    if (! $this->connect = ibase_connect($dsn,"$dbu","$dbp",'ISO8859_1',0,3)) {
      $this->Printerrore ("Fout Select: ". ibase_errmsg() ."\n") ;
      $this->fout = 'geen connectie';
      return(false);
    }
    else
      return(true);

  } // END METHOD Select }}}

  
  /*********************************************************************
  * @METHOD: str Lastid( )
  * @PARAMETERS:  
  * @RETURNS: Last inserted autonum or false
  * @SYLLABUS:
  *
  /* *********************************************************************{{{ */
  function Lastid() {
    return($this->connect->lastInsertId());
  } // END METHOD Lastid }}}


  /*********************************************************************
  * @METHOD: str newId( )
  * @PARAMETERS:  
  * @RETURNS: Last inserted autonum or false
  * @SYLLABUS: Geeft een met 1 verhoogd id terug van een tabel. Default is het
  * veld "id" maar kan aangepast worden.
  *
  /* *********************************************************************{{{ */
  function newId($tabel, $veld='id', $oorsprong='') {
    if(preg_match("/boekregels/", $tabel)) $veld='boekregelid';
    else if(preg_match("/journaal/", $tabel)) $veld='journaalid';
    else $veld='id';
    $id = $this->Get_field("MAX(\"{$veld}\")", $tabel,'',$oorsprong);
    if($id === false)
      return(false);
    else 
      return(++$id);
  } // END METHOD newId }}}


  /*********************************************************************
  * @METHOD: pointer Do_sql( [ str $oorsrprong='' ] )
  * @PARAMETERS: 
  *   str $oorsprong: een vrij in te geven string die getoond wordt indien $this->debug==true.
  *   Vaak is dit een string in de vorm: __FILE__."::".__FUNCTION__."::".__LINE__
  * @RETURNS: pointer naar resultaat of false
  * @SYLLABUS:
  *   Stuur een sql execute statement naar de database
  *   De query moet al eerder geladen zijn in de instance parameter: $object->query
  *
  /* *********************************************************************{{{ */
  function Do_sql($oorsprong='')  {

    if($this->debug) {
      if($oorsprong) $this->debugprint("Do_sql ({$oorsprong}): {$this->query}");
      else           $this->debugprint("Do_sql: {$this->query}");
    }

    return($this->Do_query($this->query));

  } // END METHOD Do_sql }}}


  /*********************************************************************
  * @METHOD: pointer Do_query( str query, [ str $oorsrprong='' ] )
  * @PARAMETERS: 
  *   str $oorsprong: een vrij in te geven string die getoond wordt indien $this->debug==true.
  *   Vaak is dit een string in de vorm: __FILE__."::".__FUNCTION__."::".__LINE__
  * @RETURNS: pointer naar resultaat of false
  * @SYLLABUS:
  *   STUUR EEN SQL STATEMENT EN EXECUTE GELIJK.
  *   Deze methode laat een evt. eerder geladen db->query intact
  *   NOTE: dit laatste is niet meer waar. Omdat PDO een Data-seek functie mist
  *   moeten we om een data-seek de query herhalen. De query van Do_sql() en
  *   Do_query moet dus bewaard zijn voor de data-seek. Dit betekent tevens dat
  *   een data-seek alleen kan worden gedaan bij een Do_sql() en een
  *   Do_query().
  *
  /* *********************************************************************{{{ */
  public static function select_handler($exception) {
    // Output the exception details
    printrc1('Select exception: '. $exception->getMessage());
  }

  function Do_query($str, $oorsprong='') {

    $str = $this->settleSign($str);
    //$str = $this->settleLimit($str);

    if($this->debug) {
      if($oorsprong) $this->debugprint("Do_query ({$oorsprong}): {$str}");
      else           $this->debugprint("Do_query: {$str}");
    }

    // Temporarily change the PHP exception handler while we . . .
    //set_exception_handler(array(__CLASS__, 'select_handler'));

    if(preg_match("/INSERT|DELETE|UPDATE|CREATE|DROP/", $str)) {
      $result = $this->connect->exec($str);
      if($result !== false) {
        $this->affected_rows = $result;
      }
      else {
        $this->affected_rows = NULL;
        $this->Printerror("<P>$str<p>Fout Query-141: \n". printr($this->connect->errorInfo(),'',true) );
        return(false);
      }
    }
    else {
      if (! $this->respointer=$this->connect->prepare($str)) { 
        $this->Printerror("<P>$str<p>Fout Query-31: \n". printr($this->connect->errorInfo(),'',true) );
        return(false);
      }
      else {
        $result = $this->respointer->execute();
      }
    }

    // Change the exception handler back to whatever it was before
    //restore_exception_handler();

    return($result);

  } // END METHOD Do_query }}}

  
  // RETURNS AN ARRAY INDEXED BY COLUMN NUMBER AS RETURNED IN YOUR RESULT SET, STARTING AT COLUMN 0  OR RETURNS FALSE
  //
  function Do_num($dummy="")  {
    if (! $arr=$this->respointer->fetch(PDO::FETCH_NUM)) {
      return(false);
    }
    return($arr);
  } // END METHOD Do_num }}}


  // RETURNS ASSOCIATIVE ARRAY FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_assoc($dummy="")  {
    if (! $arr=$this->respointer->fetch(PDO::FETCH_ASSOC)) {
      return(false);
    }
    return($arr);
  } // END METHOD Do_assoc }}}


  // RETURNS ARRAY FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_array($dummy="")  {
    if (! $arr=$this->respointer->fetch(PDO::FETCH_BOTH)) {
      return(false);
    }
    return($arr);
  } // END METHOD Do_array }}}


  // RETURNS OBJECT FROM RESULT POINTER OR RETURNS FALSE
  //
  function Do_object($mode = "")  {
    return($this->respointer->fetch(PDO::FETCH_OBJ));
  } // END METHOD Do_object }}}


  // RETURNS FIELDVALUE OF $field FROM RECORD $row
  // IN RESULT POINTER OR RETURNS FALSE
  //
  function Do_result($field=0,$row=0)  {
    return($this->respointer->fetchColumn($field));
  } // END METHOD Do_result }}}


  function settleSign($expr) {
    return(preg_replace("/[`]/", "\"", $expr));
  } // END METHOD settleSign }}}


  function settleLimit($expr) {
    return($expr);
    //return(preg_replace("/ROWS/", "LIMIT", $expr));
  } // END METHOD settleLimit }}}


  function settleWhere($expr) {

    if(preg_match("/^[ ]*(ORDER|GROUP)/", $expr)) $where=$expr;
    elseif(preg_match("/^[ ]*(AND)/", $expr))   $where = preg_replace("/AND/", "WHERE", $expr);
    elseif(preg_match("/^[ ]*(WHERE)/", $expr)) $where=$expr;
    else $where = "WHERE ".$expr;

    return($this->settleSign($where));

  } // END METHOD settleWhere }}}


  /*********************************************************************
  * @METHOD: str Get_field( string $veld, str $tabel, str $expr[, str $oorsprong]] )
  * @PARAMETERS:  
  *    str $veld: het veld waarvan de waarde willen weten
  *    str $tabel: de table waarin het veld zich bevindt
  *    str $expr: de WHERE expression zonder 'WHERE'. Als er geen selectiecriteria zijn is dit tenminste '1'
  *    str $oorsprong: een arbitraire code waarmee we in de scripts de
  *    oorsprong van de query kunnen aangeven. Dit is vooral van belang bij
  *    debug waar we kunnen zien waar b.v. een fout in een query zijn oorsprong
  *    heeft.
  * @RETURNS:  string
  * @SYLLABUS:
  *    RETURNS VALUE OF FIELD $veld FROM table,field,value
  *    syntax: $db->Get_field("veld", "table", "select", $oorsprong="hiergebeurdehet");
  *
  /* *********************************************************************{{{ */
  function Get_field($veld,$tabel,$expr='',$oorsprong='')  {

    $where = $this->settleWhere($expr);
    if(! preg_match("/\".*\"/", $veld) && $veld != 'COUNT(*)') $veld = "\"{$veld}\"";

    $this->lquery = ($expr) ? "SELECT $veld FROM $tabel $where LIMIT 1" :
                              "SELECT $veld FROM $tabel LIMIT 1";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_field ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_field: {$this->lquery}");
    }

    return($this->connect->query($this->lquery, PDO::FETCH_COLUMN, 0)->fetchColumn());

  } // END METHOD Get_field }}}


  // RETURNS ARRAY OF VALUES OF FIELD $veld OF 1 OR MORE RECORDS FROM table,field,value
  //
  /* *********************************************************************{{{ */
  function Get_array_field($veld,$tabel,$expr='',$oorsprong='')  {

    $where = $this->settleWhere($expr);
    // Als een veld wordt aangeleverd zonder omsluitende apostrophes, voeg ze toe
    if(! preg_match("/\".*\"/", $veld) && $veld != 'COUNT(*)') $veld = "\"{$veld}\"";

    $this->lquery = ($expr) ?  "SELECT $veld FROM $tabel $where" :
                               "SELECT $veld FROM $tabel";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_array_field ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_array_field: {$this->lquery}");
    }

    $tmp = $this->connect->query($this->lquery, PDO::FETCH_COLUMN, 0);

    $ar = array();
    // check expliciet op false want het antwoord kan ook een 0 of lege string zijn
    while(($val = $tmp->fetchColumn(0)) !== false) {
      $ar[] = $val;
    }

    $tmp->closeCursor();
    unset($tmp);
    
    // return dus altijd een array, desnoods een lege
    return($ar);

  } // END METHOD Get_array_field }}}


  // RETURNS VALUE OF MORE FIELDS arr[$veld] FROM table,fields,value
  //
  /* *********************************************************************{{{ */
  function Get_fields($velden,$tabel,$expr='',$assoc=1,$oorsprong='')  {
    $fields = "";
    if(is_array($velden)) {
      foreach($velden AS $val)
        if(! preg_match("/\".*\"/", $val) ) $fields .= ",\"{$val}\"";
        else $fields .= ",{$val}";
      $fields = substr($fields,1);
    }
    else 
      if(! preg_match("/\".*\"/", $velden) && $velden != 'COUNT(*)') $fields = "\"{$velden}\"";
      else $fields = $velden;

    $where = $this->settleWhere($expr);

    $this->lquery = ($expr) ? "SELECT $fields FROM $tabel $where LIMIT 1" :
                              "SELECT $fields FROM $tabel";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_fields ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_fields: {$this->lquery}");
    }

    $tmp = $this->connect->query($this->lquery);

    $arr = array();

    if($assoc == 1) {
      $arr = $tmp->fetch(PDO::FETCH_ASSOC);
    }
    else {
      // maak er geen assoc van omdat de array-items dan alleen maar
      // op veldnaam zijn te selecteren
      // Zonder assoc kan het resultaat b.v. in een list($a, $b) worden gelezen.
      // met assoc zouden a en b exact de gevraagde veldnamen moeten zijn.
      $arr = $tmp->fetch(PDO::FETCH_NUM);
    }
    $tmp->closeCursor();
    unset($tmp);

    return(count($arr) ? $arr : false);

  } // END METHOD Get_fields }}}


  // RETURNS ARRAY OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  /* *********************************************************************{{{ */
  function Get_array($expr,$type="both")  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr . " LIMIT 1 ";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_array query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_array query: {$this->lquery}");
    }

    $tmp = $this->connect->query($this->lquery);

    $arr = array();

    switch($type) {
      case 'both'  : $arr = $tmp->fetch(PDO::FETCH_BOTH); break;
      case 'assoc' : $arr = $tmp->fetch(PDO::FETCH_ASSOC); break;
      case 'num'   : $arr = $tmp->fetch(PDO::FETCH_NUM); break;
      default      : $arr = false; break;
    }
    $tmp->closeCursor();
    unset($tmp);
 
    return(count($arr) ? $arr : false);

  } // END METHOD Get_array }}}


  // RETURNS ASSOCIATIVE ARRAY OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  /* *********************************************************************{{{ */
  function Get_assoc($expr, $oorsprong='')  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr ." LIMIT 1 ";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_assoc query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_assoc query: {$this->lquery}");
    }

    if (! $rev=ibase_query($this->connect, $this->lquery)) {
      $str = "<BR>Fout Query-20 : ". ibase_errmsg() ."\n
             Oorsprong: {$oorsprong} \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror($str);
      return(false);
    }

    $arr = ibase_fetch_assoc($rev);
    ibase_free_result($rev);
    return(($arr) ? $arr : '');
    return($this->Get_array($expr, 'assoc'));

  } // END METHOD Get_assoc }}}


  // RETURNS OBJECT OF FIRST RECORD THAT IS RESULT FROM GIVEN QUERY
  //
  /* *********************************************************************{{{ */
  function Get_object($expr,$oorsprong='')  {

    $expr = $this->settleSign($expr);

    $this->lquery = $expr . " LIMIT 1 ";

    if($this->debug) {
      if($oorsprong) $this->debugprint("Get_object query: ({$oorsprong}): {$this->lquery}");
      else           $this->debugprint("Get_object query: {$this->lquery}");
    }


    if(($tmp = $this->connect->query($this->lquery)) === false) {
      $str = "<BR>Fout Query-21 : {\n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror("<P>$str<p>{\n". printr($this->connect->errorInfo(),'',true) );
      return(false);
    }
    else  {
      $obj = $tmp->fetch(PDO::FETCH_OBJ);
      unset($tmp);
      return($obj);
    }
  } // END METHOD Get_object }}}


  /*********************************************************************
  * @METHOD: str Get_datediff( str $isodate[, str $isodate2='' ] )
  * @PARAMETERS:  
  *    str $isodate: Een datum in iso formaat: 'Y-m-d'
  *    str $isodate2: Een datum in iso formaat: 'Y-m-d'
  * @RETURNS:  string difference in days
  * @SYLLABUS:
  *    RETURNS difference in days between 2 isodates. Als er 1 datum wordt
  *    meegegeven is het verschil tussen vandaag en die datum. Als er 2 data
  *    worden meegegeven dan is het verschil tussen isodate -/- isodate2
  *
  /* *********************************************************************{{{ */
  function Get_datediff($date,$date2='')  {

    switch($this->driver) {
      case 'mysql' :
        $query = ($date2) ?
          "SELECT DATEDIFF('".DateConnector::norm2iso($date)."','".DateConnector::norm2iso($date2)."')" :
          "SELECT DATEDIFF(NOW(), '".DateConnector::norm2iso($date)."')";
        break;
      case 'sqlite' :
        $query = ($date2) ?
          "SELECT julianday('".DateConnector::norm2iso($date)."') - julianday('".DateConnector::norm2iso($date2)."')" :
          "SELECT julianday('now') - julianday('".DateConnector::norm2iso($date)."')" ;
      default : break;
    }

    if($this->debug) $this->debugprint("Get_datediff query: {$query}");

    if (! $this->Do_query($query)) {
      $str = "<BR>Fout Query-22 : { \n
              <BR>RemotQuery : {$query}<P>\n";
      $this->Printerror("<P>$str<p>\n". printr($this->connect->errorInfo(),'',true) );
      return(false);
    }
    else  {
      $val = $this->Do_result();
      $this->Do_free();
      return(floor($val));
    }
  } // END METHOD Get_datediff }}}


  // DELETE RECORD(S)
  //
  function Delete_record($tabel, $expr, $oorsprong='') {

    $this->lquery = "DELETE FROM {$tabel} WHERE $expr";

    if($this->debug) $this->debugprint("Delete_record query: {$this->lquery}");

    return($this->Do_query($this->lquery, "Van Delete_record - ".$oorsprong));
  }


  /*********************************************************************
  * @METHOD: bool existTable( str $tablename )
  * @PARAMETERS:  
  * @RETURNS:  true on existance, else false
  * @SYLLABUS:
  *    Test of een bepaalde table in de database bestaat.
  *
  /* *********************************************************************{{{ */
  function existTable($name, $oorsprong='') {
      
    $this->lquery = "SELECT name FROM sqlite_master WHERE name='{$name}'";

    if($this->debug) $this->debugprint("Exist_record: {$this->lquery}");

    if (! $this->Do_query($this->lquery)) {
      $str = "<BR>Fout Query-13 : \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror("<P>$str<p>\n". printr($this->connect->errorInfo(),'',true) );
    }

    if(($val = $this->Do_result())) {
      $this->Do_free();
      return(true);
    }
    else {
      return(false);
    }
            
  } // END FUNCTION existTable }}}
  
  
  // EXIST RECORD, RETURNS FALSE, 0 OR NUMBER OF RECORDS FOUND
  //
  function Exist_record($tabel, $expr) {

    $this->lquery = "SELECT COUNT(*) FROM $tabel WHERE $expr LIMIT 1";

    if($this->debug) $this->debugprint("Exist_record: {$this->lquery}");

    if (! $this->Do_query($this->lquery)) {
      $str = "<BR>Fout Query-13 : \n
              <BR>RemotQuery : {$this->lquery}<P>\n";
      $this->Printerror("<P>$str<p>\n". printr($this->connect->errorInfo(),'',true) );
    }

    if(($val = $this->Do_result()) !== false) {
      $this->Do_free();
      return(true);
    }
    else {
      return(false);
    }

  }


  // AUXILLERY FUNCTIES
  //

  // Data_seek werkt niet in PDO
  //
  function Data_seek($row='')  {
    $this->Printerror("<P>Data_seek wordt niet ondersteund in PDO!<p>\n");
    return(false);
  }

  // Een Rewind kunnen we simuleren door de query opnieuw te stellen.
  // Dat betekent dat we een Rewind alleen kunnen gebruiken na een Do_sql omdat hier query wordt gevuld.
  function Rewind($oorsprong='') {

    if($this->debug) {
      if($oorsprong) $this->debugprint("Rewind: ({$oorsprong}): {$this->query}");
      else           $this->debugprint("Rewind: {$this->query}");
    }

    if($this->Do_query($this->query, "Oorsprong: Rewind."))
      return(true);
    else
      return(false);
  }

  function Herhaal($oorsprong='')  {

    if($this->debug) {
      if($oorsprong) $this->debugprint("Herhaal: ({$oorsprong}): {$this->query}");
      else           $this->debugprint("Herhaal: {$this->query}");
    }

    return($this->Rewind());
  }

  function Do_close()  {
    $this->Do_free();
  }

  function Do_free()  {
      $this->respointer->closeCursor();
  }

  // PDO kent geen num_rows, doe een simulatie
  //
  function N_rows()  {
    $i = 0;
    while(($this->Do_result()) !== false ) $i++;
    if($i >0) {
      $this->Rewind();
      return($i);
    }
    else
      return(false);
  }

  function N_affected_rows() {
    // $this->affected_rows is een result van Do_query met INSERT, UPDATE of DELETE
    // deze worden uitgevoerd met exec en dit geeft het aantal affected rows
    // sqlite geeft geen rowCount met een query
    return($this->affected_rows);

    if($x = $this->respointer->rowCount())
      return($x);
    else
      return(false);
  }
  
  function N_fields()  {
      return(mysql_num_fields($this->respointer));
  }

  function Field_name($ind)  {
      return(mysql_field_name($this->respointer, $ind));
  }

  function Field_type($ind)  {
      return(mysql_field_type($this->respointer, $ind));
  }

  /* ****************************************************************
  * @METHOD:   Prepare($str)
  * @SYLLABUS: Maakt een string gereed om in een SQL query in te voegen.
  *   Voor Mysql is dit b.v. addslashes().
  *   De Firebase en sqlite methode (en sybase) voegt enkele apostrophes toe
  *   als escape characters. Tevens voegt het een enkele apostrophe aan het
  *   begin en einde van de string toe zodat het Insert statement geen
  *   apostrophes mag hebben. Dat is niet slim omdat we dan de code op veel
  *   plaatsen moeten wijzigen. Beter is om hier de begin en eindapostroph er
  *   weer af te halen.
  *****************************************************************{{{ */
  function Prepare($str) {
    // Denk eraan dat sqlite::quote ook apostrophes aan het begin en eind van
    // de string zet. Dus die weglaten in het SQL statement maar voor mysql hier dan weer toevoegen.
    switch($this->driver) {
      case 'mysql' : return(addslashes($str)); break;
      case 'sqlite' : return(substr($this->connect->quote($str),1,-1)); break;
    }
  } // END METHOD Prepare }}}

  function Printerror($str) {
    echo "\n\n<!-- FUNCTIONAL ERROR: \n".$str." -->\n\n";
  }

  function Printerrore($str) {
    echo "\n\n<!-- FATAL ERROR: \n".$str." -->\n\n";
    exit;
  }

  function debugprint($str) {
    echo "  \n<!-- $str -->\n";
  }

  // TRANSACTION METHODS

  function exec($query) {
    return(self::Do_query($query));
  }

  function beginTransaction() {
    return($this->connect->beginTransaction());
  }

  function commit() {
    return($this->connect->commit());
  }

} // END CLASS PDOConnector

// sqlite UDF functions
function Myround($val, $prec) {
  return round($val, $prec);
}

// create a function named "preg_match"
// with the php core function "preg_match"
function Mypregmatch($needle, $haystack) {
  return preg_match($needle, $haystack);
}

//if ($db->createFunction("preg_match", "preg_match", 2) === FALSE)
//  exit("Failed creating function\n");

// this query will then works as expected
//$result = $db->query("SELECT * FROM table1 WHERE
//                      preg_match('/^(apple|orange)$/', variable1)");

/*******************************************************************************
***  END _dbasepdo.lib
******************************************************************************}}} */

/* __END__ */
